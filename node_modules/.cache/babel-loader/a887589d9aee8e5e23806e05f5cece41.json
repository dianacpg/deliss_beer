{"ast":null,"code":"var _jsxFileName = \"/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/MealPlanner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CardMeal from \"./RecipeCard\";\nimport \"./MealPlanner2.css\";\nimport Filter from \"./Filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY; // We have to display 7 breakfasts, 7 lunches and 7 dinners;\n// We will get the recipes on the edamame API and use it on the state as an array;\n// Problem: We need diversity and not display the array always on the same order; The API doesnt have recipes ID's.\n// Possible solution: Get more than 7 meal from the API (ex: 40), Shuffle the array and then create a new array with only 7;\n// ex:          [banana, apple, orange, durian, kiwi, cherry, lemon, melon, pumpkin] -> then Reset ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon, cherry, durian] -> Splice to 7 meals ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon]\n//In Conclusion: 1ยบ get 40 recipes\n//               2ยบ Shuffle the 40 recipes\n//               3ยบ Get the first 7 recipes from that shuffled array\n// Since we have to display always 7 breakfasts, 7 lunches and 7 dinners I called the API 3 times with the meal types and put the recipes on the State as arrays.\n// Function to shuffle arrays\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nconst MealPlan = () => {\n  _s();\n\n  const [breakfast, setBreakfast] = useState([]);\n  const [lunch, setLunch] = useState([]);\n  const [dinner, setDinner] = useState([]);\n  const [diet, setDiet] = useState(\"balanced\");\n  const [numberMeals, SetNumberMeals] = useState(\"40\"); //Fetch API for the 3 types of meals (Breakfast, Lunch, Dinner)\n\n  useEffect(() => {\n    axios.get(`https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${diet}&from=0&to=${numberMeals}&mealType=breakfast`).then(res => {\n      setBreakfast(res.data.hits);\n    });\n    axios.get(`https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}&dishType=main&mealType=lunch`).then(res => {\n      setLunch(res.data.hits);\n    });\n    axios.get(`https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}&mealType=dinner&dishType=main`).then(res => {\n      setBreakfast(res.data.hits);\n    });\n  }, []); //Adding user preferences\n  //onHandleRadioButton = (e) => {\n  //  this.setState({ diet: e.target.value });\n  // };\n  //displaying recipes per type of meal\n\n  const shuffleBreakfastList = shuffleArray(breakfast); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n\n  const weeklyBreakfastNumber = shuffleBreakfastList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n\n  const BreakfastCardList = breakfast.length ? // create a recipe card for each recipe\n  weeklyBreakfastNumber.map(recipe => {\n    return /*#__PURE__*/_jsxDEV(CardMeal, {\n      image: recipe.recipe.image,\n      name: recipe.recipe.label,\n      link: recipe.recipe.url,\n      ingredients: recipe.recipe.ingredientLines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Meals are cooking...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n  const shuffleLunchList = shuffleArray(lunch); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n\n  const weeklyLunchNumber = shuffleLunchList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n\n  const LunchCardList = lunch.length ? // create a recipe card for each recipe\n  weeklyLunchNumber.map(recipe => {\n    return /*#__PURE__*/_jsxDEV(CardMeal, {\n      image: recipe.recipe.image,\n      name: recipe.recipe.label,\n      link: recipe.recipe.url,\n      ingredients: recipe.recipe.ingredientLines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Meals are cooking...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n  const shuffleDinnerList = shuffleArray(dinner); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n\n  const weeklyDinnerNumber = shuffleDinnerList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n\n  const DinnerCardList = dinner.length ? //   // create a recipe card for each recipe\n  weeklyDinnerNumber.map(recipe => {\n    return /*#__PURE__*/_jsxDEV(CardMeal, {\n      image: recipe.recipe.image,\n      name: recipe.recipe.label,\n      link: recipe.recipe.url,\n      ingredients: recipe.recipe.ingredientLines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Meals are cooking...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meal Planner Happiness\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mealtypes\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meals\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Breakfast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"breakfast\",\n            children: BreakfastCardList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Lunch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"lunch\",\n            children: LunchCardList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Dinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"dinner\",\n            children: DinnerCardList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MealPlan, \"E/Dvy0f1uxSKnYRpzMGz+oGEsJY=\");\n\n_c = MealPlan;\nexport default MealPlan; //     <Filter handleChange={this.onHandleRadioButton} />\n\nvar _c;\n\n$RefreshReg$(_c, \"MealPlan\");","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/MealPlanner.js"],"names":["React","useState","useEffect","axios","CardMeal","Filter","API_ID","process","env","REACT_APP_EDAMAM_API_ID","API_KEY","REACT_APP_EDAMAM_API_KEY","shuffleArray","array","i","length","j","Math","floor","random","temp","MealPlan","breakfast","setBreakfast","lunch","setLunch","dinner","setDinner","diet","setDiet","numberMeals","SetNumberMeals","get","then","res","data","hits","state","shuffleBreakfastList","weeklyBreakfastNumber","slice","BreakfastCardList","map","recipe","image","label","url","ingredientLines","shuffleLunchList","weeklyLunchNumber","LunchCardList","shuffleDinnerList","weeklyDinnerNumber","DinnerCardList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAA3B;AACA,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,wBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAvB;;AACA,SAAOD,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACjB,UAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,UAAMM,IAAI,GAAGP,KAAK,CAACC,CAAD,CAAlB;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACD;;AACD,SAAOP,KAAP;AACD;;AAED,MAAMQ,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC2B,IAAD,EAAOC,OAAP,IAAkB5B,QAAQ,CAAC,UAAD,CAAhC;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,IAAD,CAA9C,CALqB,CAOrB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CACF6B,GADH,CAEK,wCAAuC1B,MAAO,YAAWI,OAAQ,YAAWkB,IAAK,cAAaE,WAAY,qBAF/G,EAIGG,IAJH,CAISC,GAAD,IAAS;AACbX,MAAAA,YAAY,CAACW,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAZ;AACD,KANH;AAQAjC,IAAAA,KAAK,CACF6B,GADH,CAEK,wCAAuC1B,MAAO,YAAWI,OAAQ,YAAW,KAAK2B,KAAL,CAAWT,IAAK,cAAa,KAAKS,KAAL,CAAWP,WAAY,+BAFrI,EAIGG,IAJH,CAISC,GAAD,IAAS;AACbT,MAAAA,QAAQ,CAACS,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAR;AACD,KANH;AAQAjC,IAAAA,KAAK,CACF6B,GADH,CAEK,wCAAuC1B,MAAO,YAAWI,OAAQ,YAAW,KAAK2B,KAAL,CAAWT,IAAK,cAAa,KAAKS,KAAL,CAAWP,WAAY,gCAFrI,EAIGG,IAJH,CAISC,GAAD,IAAS;AACbX,MAAAA,YAAY,CAACW,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAZ;AACD,KANH;AAOD,GAxBQ,EAwBN,EAxBM,CAAT,CATqB,CAmCrB;AACA;AACA;AACA;AAEA;;AAEA,QAAME,oBAAoB,GAAG1B,YAAY,CAACU,SAAD,CAAzC,CA1CqB,CA0CiC;;AACtD,QAAMiB,qBAAqB,GAAGD,oBAAoB,CAACE,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAA9B,CA3CqB,CA2C2C;;AAChE,QAAMC,iBAAiB,GAAGnB,SAAS,CAACP,MAAV,GAAqB;AAC7CwB,EAAAA,qBAAqB,CAACG,GAAtB,CAA2BC,MAAD,IAAY;AACpC,wBACE,QAAC,QAAD;AACE,MAAA,KAAK,EAAEA,MAAM,CAACA,MAAP,CAAcC,KADvB;AAEE,MAAA,IAAI,EAAED,MAAM,CAACA,MAAP,CAAcE,KAFtB;AAGE,MAAA,IAAI,EAAEF,MAAM,CAACA,MAAP,CAAcG,GAHtB;AAIE,MAAA,WAAW,EAAEH,MAAM,CAACA,MAAP,CAAcI;AAJ7B;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD,CADwB,gBAYxB;AAAA,eACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAE8B,GAF9B;AAAA;AAAA;AAAA;AAAA;AAAA,UAZF;AAkBA,QAAMC,gBAAgB,GAAGpC,YAAY,CAACY,KAAD,CAArC,CA9DqB,CA8DyB;;AAC9C,QAAMyB,iBAAiB,GAAGD,gBAAgB,CAACR,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAA1B,CA/DqB,CA+DmC;;AACxD,QAAMU,aAAa,GAAG1B,KAAK,CAACT,MAAN,GAAiB;AACrCkC,EAAAA,iBAAiB,CAACP,GAAlB,CAAuBC,MAAD,IAAY;AAChC,wBACE,QAAC,QAAD;AACE,MAAA,KAAK,EAAEA,MAAM,CAACA,MAAP,CAAcC,KADvB;AAEE,MAAA,IAAI,EAAED,MAAM,CAACA,MAAP,CAAcE,KAFtB;AAGE,MAAA,IAAI,EAAEF,MAAM,CAACA,MAAP,CAAcG,GAHtB;AAIE,MAAA,WAAW,EAAEH,MAAM,CAACA,MAAP,CAAcI;AAJ7B;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD,CADoB,gBAYpB;AAAA,eACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAE8B,GAF9B;AAAA;AAAA;AAAA;AAAA;AAAA,UAZF;AAkBA,QAAMI,iBAAiB,GAAGvC,YAAY,CAACc,MAAD,CAAtC,CAlFqB,CAkF2B;;AAChD,QAAM0B,kBAAkB,GAAGD,iBAAiB,CAACX,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAA3B,CAnFqB,CAmFqC;;AAC1D,QAAMa,cAAc,GAAG3B,MAAM,CAACX,MAAP,GAAkB;AACvCqC,EAAAA,kBAAkB,CAACV,GAAnB,CAAwBC,MAAD,IAAY;AACjC,wBACE,QAAC,QAAD;AACE,MAAA,KAAK,EAAEA,MAAM,CAACA,MAAP,CAAcC,KADvB;AAEE,MAAA,IAAI,EAAED,MAAM,CAACA,MAAP,CAAcE,KAFtB;AAGE,MAAA,IAAI,EAAEF,MAAM,CAACA,MAAP,CAAcG,GAHtB;AAIE,MAAA,WAAW,EAAEH,MAAM,CAACA,MAAP,CAAcI;AAJ7B;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD,CADqB,gBAYrB;AAAA,eACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAE8B,GAF9B;AAAA;AAAA;AAAA;AAAA;AAAA,UAZF;AAkBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,EAAE,EAAC,WAAR;AAAA,sBAAqBN;AAArB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAK,YAAA,EAAE,EAAC,OAAR;AAAA,sBAAiBS;AAAjB;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAK,YAAA,EAAE,EAAC,QAAR;AAAA,sBAAkBG;AAAlB;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA5HD;;GAAMhC,Q;;KAAAA,Q;AA8HN,eAAeA,QAAf,C,CAEA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CardMeal from \"./RecipeCard\";\nimport \"./MealPlanner2.css\";\nimport Filter from \"./Filter\";\n\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY;\n\n// We have to display 7 breakfasts, 7 lunches and 7 dinners;\n// We will get the recipes on the edamame API and use it on the state as an array;\n// Problem: We need diversity and not display the array always on the same order; The API doesnt have recipes ID's.\n// Possible solution: Get more than 7 meal from the API (ex: 40), Shuffle the array and then create a new array with only 7;\n// ex:          [banana, apple, orange, durian, kiwi, cherry, lemon, melon, pumpkin] -> then Reset ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon, cherry, durian] -> Splice to 7 meals ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon]\n//In Conclusion: 1ยบ get 40 recipes\n//               2ยบ Shuffle the 40 recipes\n//               3ยบ Get the first 7 recipes from that shuffled array\n// Since we have to display always 7 breakfasts, 7 lunches and 7 dinners I called the API 3 times with the meal types and put the recipes on the State as arrays.\n\n// Function to shuffle arrays\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nconst MealPlan = () => {\n  const [breakfast, setBreakfast] = useState([]);\n  const [lunch, setLunch] = useState([]);\n  const [dinner, setDinner] = useState([]);\n  const [diet, setDiet] = useState(\"balanced\");\n  const [numberMeals, SetNumberMeals] = useState(\"40\");\n\n  //Fetch API for the 3 types of meals (Breakfast, Lunch, Dinner)\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${diet}&from=0&to=${numberMeals}&mealType=breakfast`\n      )\n      .then((res) => {\n        setBreakfast(res.data.hits);\n      });\n\n    axios\n      .get(\n        `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}&dishType=main&mealType=lunch`\n      )\n      .then((res) => {\n        setLunch(res.data.hits);\n      });\n\n    axios\n      .get(\n        `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}&mealType=dinner&dishType=main`\n      )\n      .then((res) => {\n        setBreakfast(res.data.hits);\n      });\n  }, []);\n\n  //Adding user preferences\n  //onHandleRadioButton = (e) => {\n  //  this.setState({ diet: e.target.value });\n  // };\n\n  //displaying recipes per type of meal\n\n  const shuffleBreakfastList = shuffleArray(breakfast); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n  const weeklyBreakfastNumber = shuffleBreakfastList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n  const BreakfastCardList = breakfast.length ? ( // create a recipe card for each recipe\n    weeklyBreakfastNumber.map((recipe) => {\n      return (\n        <CardMeal\n          image={recipe.recipe.image}\n          name={recipe.recipe.label}\n          link={recipe.recipe.url}\n          ingredients={recipe.recipe.ingredientLines}\n        />\n      );\n    })\n  ) : (\n    <div>\n      {\" \"}\n      <p>Meals are cooking...</p>{\" \"}\n    </div>\n  );\n\n  const shuffleLunchList = shuffleArray(lunch); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n  const weeklyLunchNumber = shuffleLunchList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n  const LunchCardList = lunch.length ? ( // create a recipe card for each recipe\n    weeklyLunchNumber.map((recipe) => {\n      return (\n        <CardMeal\n          image={recipe.recipe.image}\n          name={recipe.recipe.label}\n          link={recipe.recipe.url}\n          ingredients={recipe.recipe.ingredientLines}\n        />\n      );\n    })\n  ) : (\n    <div>\n      {\" \"}\n      <p>Meals are cooking...</p>{\" \"}\n    </div>\n  );\n\n  const shuffleDinnerList = shuffleArray(dinner); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n  const weeklyDinnerNumber = shuffleDinnerList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n  const DinnerCardList = dinner.length ? ( //   // create a recipe card for each recipe\n    weeklyDinnerNumber.map((recipe) => {\n      return (\n        <CardMeal\n          image={recipe.recipe.image}\n          name={recipe.recipe.label}\n          link={recipe.recipe.url}\n          ingredients={recipe.recipe.ingredientLines}\n        />\n      );\n    })\n  ) : (\n    <div>\n      {\" \"}\n      <p>Meals are cooking...</p>{\" \"}\n    </div>\n  );\n\n  return (\n    <div>\n      <h1>Meal Planner Happiness</h1>\n      <div id=\"container\">\n        <div className=\"mealtypes\">\n          {\" \"}\n          <h2> </h2>\n        </div>\n        <div className=\"plan_container\">\n          <div className=\"days\"></div>\n          <div className=\"meals\">\n            <h2>Breakfast</h2>\n            <div id=\"breakfast\">{BreakfastCardList}</div>\n            <h2>Lunch</h2>\n            <div id=\"lunch\">{LunchCardList}</div>\n            <h2>Dinner</h2>\n            <div id=\"dinner\">{DinnerCardList}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MealPlan;\n\n//     <Filter handleChange={this.onHandleRadioButton} />\n"]},"metadata":{},"sourceType":"module"}