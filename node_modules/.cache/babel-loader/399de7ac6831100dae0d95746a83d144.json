{"ast":null,"code":"var _jsxFileName = \"/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/pages/Signin.js\",\n    _s = $RefreshSig$();\n\nimport SigninForm from \"../components/SigninForm\";\nimport RegisterForm from \"../components/RegisterForm\";\nimport MealPlanner from \"./MealPlanner\";\nimport \"../styles/SignIn.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signin = () => {\n  _s();\n\n  const [route, setRoute] = useState(\"signin\"); // The authentification will be determine by the route state. Signin means that the user has to sign in.\n\n  const [signInEmail, setSignInEmail] = useState(\"\");\n  const [signInPassword, setSigninPassword] = useState(\"\");\n  const [user, loadUser] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    favorites: \"\",\n    joined: \"\"\n  });\n\n  const updateLoadUser = data => {\n    //this is for when to update the profile informations when we register or signin\n    loadUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      favorites: data.entries,\n      joined: data.joined\n    });\n  }; //To Persist state to localstorage. If we have the state store on localstore, change state to that, when refresh page\n\n\n  useEffect(() => {\n    const localdata = localStorage.getItem(\"save-status\");\n\n    if (localdata) {\n      setRoute(JSON.parse(localdata));\n    }\n  }, []); //to add the state route into local storage has a string!\n\n  useEffect(() => {\n    localStorage.setItem(\"save-status\", JSON.stringify(route));\n  }); //to change the state to what the user writes in the signin form\n\n  const onEmailChange = event => {\n    setSignInEmail(event.target.value);\n  };\n\n  const onPasswordChange = event => {\n    setSigninPassword(event.target.value);\n  }; //this will change the route state, that will determine the validation to show mealplan ou not\n\n\n  const onRouteChange = route => {\n    setRoute(route);\n  }; //When submit, we will connect to the server to post the email and password\n\n\n  const onSubmitSignIn = e => {\n    e.preventDefault(); //prevent the default submit event. Don't forget to put also on e param on the onSubmitSignIn - SigninForm\n\n    fetch(\"http://localhost:3000/signin\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: signInEmail,\n        password: signInPassword\n      })\n    }).then(response => response.json()).then(user => {\n      //after we post, if it matches with the email and password database, the response from the server will be user details. So if we receive an id that means it was the post === database\n      if (user.id) {\n        updateLoadUser(user); //to update user details\n\n        setRoute(\"mealplanner\"); // to change state from signin to mealplanner and show the mealplan\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: route === \"mealplanner\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcomeboard\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Hello \", user.name, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/favorites/${user.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"btn_home\",\n            type: \"button\",\n            children: [\" \", \"Check your Favorite Recipes!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onRouteChange(\"signin\"),\n          children: \"Signout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MealPlanner, {\n        user: user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : route === \"signin\" ?\n    /*#__PURE__*/\n    // If the route state is \"signin\" it will show only the sign in form. If the route is not signin, that means the user is logged so the mealplanner will be shown\n    _jsxDEV(SigninForm, {\n      onSubmitSignIn: onSubmitSignIn,\n      onEmailChange: onEmailChange,\n      onPasswordChange: onPasswordChange,\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n      updateLoadUser: updateLoadUser,\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signin, \"cvjzH3XHFTy1aEFErgkinMHenlE=\");\n\n_c = Signin;\nexport default Signin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signin\");","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/pages/Signin.js"],"names":["SigninForm","RegisterForm","MealPlanner","React","useState","useEffect","Link","Signin","route","setRoute","signInEmail","setSignInEmail","signInPassword","setSigninPassword","user","loadUser","id","name","email","favorites","joined","updateLoadUser","data","entries","localdata","localStorage","getItem","JSON","parse","setItem","stringify","onEmailChange","event","target","value","onPasswordChange","onRouteChange","onSubmitSignIn","e","preventDefault","fetch","method","headers","body","password","then","response","json"],"mappings":"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","sourcesContent":["import SigninForm from \"../components/SigninForm\";\nimport RegisterForm from \"../components/RegisterForm\";\nimport MealPlanner from \"./MealPlanner\";\nimport \"../styles/SignIn.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Signin = () => {\n  const [route, setRoute] = useState(\"signin\"); // The authentification will be determine by the route state. Signin means that the user has to sign in.\n  const [signInEmail, setSignInEmail] = useState(\"\");\n  const [signInPassword, setSigninPassword] = useState(\"\");\n  const [user, loadUser] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    favorites: \"\",\n    joined: \"\",\n  });\n\n  const updateLoadUser = (data) => {\n    //this is for when to update the profile informations when we register or signin\n    loadUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      favorites: data.entries,\n      joined: data.joined,\n    });\n  };\n\n  //To Persist state to localstorage. If we have the state store on localstore, change state to that, when refresh page\n  useEffect(() => {\n    const localdata = localStorage.getItem(\"save-status\");\n    if (localdata) {\n      setRoute(JSON.parse(localdata));\n    }\n  }, []);\n\n  //to add the state route into local storage has a string!\n  useEffect(() => {\n    localStorage.setItem(\"save-status\", JSON.stringify(route));\n  });\n\n  //to change the state to what the user writes in the signin form\n  const onEmailChange = (event) => {\n    setSignInEmail(event.target.value);\n  };\n\n  const onPasswordChange = (event) => {\n    setSigninPassword(event.target.value);\n  };\n\n  //this will change the route state, that will determine the validation to show mealplan ou not\n  const onRouteChange = (route) => {\n    setRoute(route);\n  };\n\n  //When submit, we will connect to the server to post the email and password\n  const onSubmitSignIn = (e) => {\n    e.preventDefault(); //prevent the default submit event. Don't forget to put also on e param on the onSubmitSignIn - SigninForm\n    fetch(\"http://localhost:3000/signin\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: signInEmail,\n        password: signInPassword,\n      }),\n    })\n      .then((response) => response.json())\n      .then((user) => {\n        //after we post, if it matches with the email and password database, the response from the server will be user details. So if we receive an id that means it was the post === database\n        if (user.id) {\n          updateLoadUser(user); //to update user details\n          setRoute(\"mealplanner\"); // to change state from signin to mealplanner and show the mealplan\n        }\n      });\n  };\n\n  return (\n    <div>\n      {route === \"mealplanner\" ? (\n        <div>\n          {/* Added a signout option that will change the state to sigin. This means that mealplanner will not be shown */}\n          <div className=\"welcomeboard\">\n            <p>Hello {user.name}!</p>\n\n            <Link to={`/favorites/${user.id}`}>\n              <button id=\"btn_home\" type=\"button\">\n                {\" \"}\n                Check your Favorite Recipes!\n              </button>\n            </Link>\n            <button onClick={() => onRouteChange(\"signin\")}>Signout</button>\n          </div>\n          <MealPlanner user={user.id} />\n        </div>\n      ) : route === \"signin\" ? ( // If the route state is \"signin\" it will show only the sign in form. If the route is not signin, that means the user is logged so the mealplanner will be shown\n        <SigninForm\n          onSubmitSignIn={onSubmitSignIn}\n          onEmailChange={onEmailChange}\n          onPasswordChange={onPasswordChange}\n          onRouteChange={onRouteChange}\n        />\n      ) : (\n        <RegisterForm\n          updateLoadUser={updateLoadUser}\n          onRouteChange={onRouteChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Signin;\n"]},"metadata":{},"sourceType":"module"}