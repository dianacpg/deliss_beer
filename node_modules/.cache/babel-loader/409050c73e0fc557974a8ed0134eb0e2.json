{"ast":null,"code":"var _jsxFileName = \"/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/MealPlanner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CardMeal from \"./RecipeCard\";\nimport \"./MealPlanner2.css\";\nimport Filter from \"./Filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY; // We have to display 7 breakfasts, 7 lunches and 7 dinners;\n// We will get the recipes on the edamame API and use it on the state as an array;\n// Problem: We need diversity and not display the array always on the same order; The API doesnt have recipes ID's.\n// Possible solution: Get more than 7 meal from the API (ex: 40), Shuffle the array and then create a new array with only 7;\n// ex:          [banana, apple, orange, durian, kiwi, cherry, lemon, melon, pumpkin] -> then Reset ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon, cherry, durian] -> Splice to 7 meals ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon]\n//In Conclusion: 1º get 40 recipes\n//               2º Shuffle the 40 recipes\n//               3º Get the first 7 recipes from that shuffled array\n// Since we have to display always 7 breakfasts, 7 lunches and 7 dinners I called the API 3 times with the meal types and put the recipes on the State as arrays.\n// Function to shuffle arrays\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nconst MealPlan = () => {\n  _s();\n\n  const [breakfast, SetBreakfast] = useState([]);\n  const [lunch, SetLunch] = useState([]);\n  const [dinner, SetDinner] = useState([]);\n  const [diet, SetDiet] = useState(\"balanced\");\n  const [numberMeals, SetNumberMeals] = useState(\"40\");\n  useEffect(() => {\n    fetch(`https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}&mealType=breakfast`).then(response => response.json()).then(res => {\n      setBreakfast(res);\n      console.log(breakfast);\n    });\n  }, []);\n\n  onHandleRadioButton = e => {\n    this.setState({\n      diet: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meal Planner Happiness\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      handleChange: this.onHandleRadioButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mealtypes\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meals\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Breakfast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"breakfast\",\n            children: breakfast\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Lunch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"lunch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Dinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"dinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MealPlan, \"/7+LtDhMW5VmQ2HBl+EsGL3AI4c=\");\n\n_c = MealPlan;\nexport default MealPlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"MealPlan\");","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/MealPlanner.js"],"names":["React","useState","useEffect","axios","CardMeal","Filter","API_ID","process","env","REACT_APP_EDAMAM_API_ID","API_KEY","REACT_APP_EDAMAM_API_KEY","shuffleArray","array","i","length","j","Math","floor","random","temp","MealPlan","breakfast","SetBreakfast","lunch","SetLunch","dinner","SetDinner","diet","SetDiet","numberMeals","SetNumberMeals","fetch","state","then","response","json","res","setBreakfast","console","log","onHandleRadioButton","e","setState","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAA3B;AACA,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAR,CAAYG,wBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAvB;;AACA,SAAOD,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACjB,UAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,UAAMM,IAAI,GAAGP,KAAK,CAACC,CAAD,CAAlB;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACD;;AACD,SAAOP,KAAP;AACD;;AAED,MAAMQ,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC2B,IAAD,EAAOC,OAAP,IAAkB5B,QAAQ,CAAC,UAAD,CAAhC;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,IAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,KAAK,CACF,wCAAuC1B,MAAO,YAAWI,OAAQ,YAAW,KAAKuB,KAAL,CAAWL,IAAK,cAAa,KAAKK,KAAL,CAAWH,WAAY,qBAD9H,CAAL,CAGGI,IAHH,CAGSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHtB,EAIGF,IAJH,CAISG,GAAD,IAAS;AACbC,MAAAA,YAAY,CAACD,GAAD,CAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYlB,SAAZ;AACD,KAPH;AAQD,GATQ,EASN,EATM,CAAT;;AAWAmB,EAAAA,mBAAmB,GAAIC,CAAD,IAAO;AAC3B,SAAKC,QAAL,CAAc;AAAEf,MAAAA,IAAI,EAAEc,CAAC,CAACE,MAAF,CAASC;AAAjB,KAAd;AACD,GAFD;;AAGA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,YAAY,EAAE,KAAKJ;AAA3B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,EAAE,EAAC,WAAR;AAAA,sBAAqBnB;AAArB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAK,YAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAK,YAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA5CD;;GAAMD,Q;;KAAAA,Q;AA8CN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CardMeal from \"./RecipeCard\";\nimport \"./MealPlanner2.css\";\nimport Filter from \"./Filter\";\n\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY;\n\n// We have to display 7 breakfasts, 7 lunches and 7 dinners;\n// We will get the recipes on the edamame API and use it on the state as an array;\n// Problem: We need diversity and not display the array always on the same order; The API doesnt have recipes ID's.\n// Possible solution: Get more than 7 meal from the API (ex: 40), Shuffle the array and then create a new array with only 7;\n// ex:          [banana, apple, orange, durian, kiwi, cherry, lemon, melon, pumpkin] -> then Reset ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon, cherry, durian] -> Splice to 7 meals ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon]\n//In Conclusion: 1º get 40 recipes\n//               2º Shuffle the 40 recipes\n//               3º Get the first 7 recipes from that shuffled array\n// Since we have to display always 7 breakfasts, 7 lunches and 7 dinners I called the API 3 times with the meal types and put the recipes on the State as arrays.\n\n// Function to shuffle arrays\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nconst MealPlan = () => {\n  const [breakfast, SetBreakfast] = useState([]);\n  const [lunch, SetLunch] = useState([]);\n  const [dinner, SetDinner] = useState([]);\n  const [diet, SetDiet] = useState(\"balanced\");\n  const [numberMeals, SetNumberMeals] = useState(\"40\");\n\n  useEffect(() => {\n    fetch(\n      `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}&mealType=breakfast`\n    )\n      .then((response) => response.json())\n      .then((res) => {\n        setBreakfast(res);\n        console.log(breakfast);\n      });\n  }, []);\n\n  onHandleRadioButton = (e) => {\n    this.setState({ diet: e.target.value });\n  };\n  return (\n    <div>\n      <h1>Meal Planner Happiness</h1>\n      <Filter handleChange={this.onHandleRadioButton} />\n      <div id=\"container\">\n        <div className=\"mealtypes\">\n          {\" \"}\n          <h2> </h2>\n        </div>\n        <div className=\"plan_container\">\n          <div className=\"days\"></div>\n          <div className=\"meals\">\n            <h2>Breakfast</h2>\n            <div id=\"breakfast\">{breakfast}</div>\n            <h2>Lunch</h2>\n            <div id=\"lunch\"></div>\n            <h2>Dinner</h2>\n            <div id=\"dinner\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MealPlan;\n"]},"metadata":{},"sourceType":"module"}