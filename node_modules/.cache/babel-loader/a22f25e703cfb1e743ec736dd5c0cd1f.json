{"ast":null,"code":"var _jsxFileName = \"/Users/lorennav/Documents/Diana/Web Apps Diana/DelissBeer/src/components/MealList.js\";\nimport CardMeal from \"./CardMeal\";\nimport \"../styles/MealList.css\"; //Function the shuffle arrays\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n} //We got the recipes arrays for meals, but we need to shuffle the recipes in order to not to show the same recipes everytime.\n// If we get only 7 recipes for meals, we will not have diversity. So we can get 40 meal and then slice to display only 7\n// We will map each array and create a cardMeal for each recipe\n\n\nconst MealList = ({\n  props,\n  user\n}) => {\n  const shuffleMealList = shuffleArray(props);\n  const sevenDaysMeal = shuffleMealList.slice(0, 7);\n  const finalMealList = sevenDaysMeal.map(beer => {\n    return /*#__PURE__*/_jsxDEV(CardMeal, {\n      image: beer.image_url,\n      name: beer.name,\n      description: beer.description // ingredients={recipe.recipe.ingredientLines}\n      ,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"meallist\",\n    children: finalMealList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n\n_c = MealList;\nexport default MealList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MealList\");","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/DelissBeer/src/components/MealList.js"],"names":["CardMeal","shuffleArray","array","i","length","j","Math","floor","random","temp","MealList","props","user","shuffleMealList","sevenDaysMeal","slice","finalMealList","map","beer","image_url","name","description"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAO,wBAAP,C,CAEA;;;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAvB;;AACA,SAAOD,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACjB,UAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,UAAMM,IAAI,GAAGP,KAAK,CAACC,CAAD,CAAlB;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACD;;AACD,SAAOP,KAAP;AACD,C,CAED;AACA;AACA;;;AACA,MAAMQ,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAqB;AACpC,QAAMC,eAAe,GAAGZ,YAAY,CAACU,KAAD,CAApC;AACA,QAAMG,aAAa,GAAGD,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAtB;AACA,QAAMC,aAAa,GAAGF,aAAa,CAACG,GAAd,CAAmBC,IAAD,IAAU;AAChD,wBACE,QAAC,QAAD;AACE,MAAA,KAAK,EAAEA,IAAI,CAACC,SADd;AAEE,MAAA,IAAI,EAAED,IAAI,CAACE,IAFb;AAGE,MAAA,WAAW,EAAEF,IAAI,CAACG,WAHpB,CAIE;AAJF;AAKE,MAAA,IAAI,EAAET;AALR;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAVqB,CAAtB;AAWA,sBAAO;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cAA2BI;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAfD;;KAAMN,Q;AAiBN,eAAeA,QAAf","sourcesContent":["import CardMeal from \"./CardMeal\";\nimport \"../styles/MealList.css\";\n\n//Function the shuffle arrays\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n//We got the recipes arrays for meals, but we need to shuffle the recipes in order to not to show the same recipes everytime.\n// If we get only 7 recipes for meals, we will not have diversity. So we can get 40 meal and then slice to display only 7\n// We will map each array and create a cardMeal for each recipe\nconst MealList = ({ props, user }) => {\n  const shuffleMealList = shuffleArray(props);\n  const sevenDaysMeal = shuffleMealList.slice(0, 7);\n  const finalMealList = sevenDaysMeal.map((beer) => {\n    return (\n      <CardMeal\n        image={beer.image_url}\n        name={beer.name}\n        description={beer.description}\n        // ingredients={recipe.recipe.ingredientLines}\n        user={user}\n      />\n    );\n  });\n  return <div className=\"meallist\">{finalMealList}</div>;\n};\n\nexport default MealList;\n"]},"metadata":{},"sourceType":"module"}