{"ast":null,"code":"var _jsxFileName = \"/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/pages/Signin.js\",\n    _s = $RefreshSig$();\n\nimport SigninForm from \"../components/SigninForm\";\nimport RegisterForm from \"../components/RegisterForm\";\nimport MealPlanner from \"./MealPlanner\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signin = () => {\n  _s();\n\n  const [route, setRoute] = useState(\"signin\"); // The authentification will be determine by the route state. Signin means that the user has to sign in.\n\n  const [signInEmail, setSignInEmail] = useState(\"\");\n  const [signInPassword, setSigninPassword] = useState(\"\");\n  const [user, loadUser] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    favorites: \"\",\n    joined: \"\"\n  });\n\n  const updateLoadUser = data => {\n    //this is to update user when enters?\n    loadUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      favorites: data.entries,\n      joined: data.joined\n    });\n  }; //to change the state to what the user writes in the signin form\n\n\n  const onEmailChange = event => {\n    setSignInEmail(event.target.value);\n  };\n\n  const onPasswordChange = event => {\n    setSigninPassword(event.target.value);\n  };\n\n  const onRouteChange = route => {\n    setRoute(route);\n  }; //When submit we will connect to the server with fetch and post the email and password\n\n\n  const onSubmitSignIn = e => {\n    e.preventDefault(); //prevent the default submit event. Don't forget to put also on e param on the onSubmitSignIn - SigninForm\n\n    fetch(\"http://localhost:3000/signin\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: signInEmail,\n        password: signInPassword\n      })\n    }).then(response => response.json()).then(data => {\n      if (data === \"success\") {\n        setRoute(\"home\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: route === \"home\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => onRouteChange(\"signin\"),\n        children: \"Signout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MealPlanner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : route === \"signin\" ?\n    /*#__PURE__*/\n    // If the route state is \"signin\" it will show only the sign in form. If the route is not signin, that means the user is logged so the mealplanner will be shown\n    _jsxDEV(SigninForm, {\n      onSubmitSignIn: onSubmitSignIn,\n      onEmailChange: onEmailChange,\n      onPasswordChange: onPasswordChange,\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RegisterForm, {\n      loadUser: updateLoadUser,\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signin, \"d+nLXVm6TGDgIWL5Sp45d1aKMSc=\");\n\n_c = Signin;\nexport default Signin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signin\");","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/pages/Signin.js"],"names":["SigninForm","RegisterForm","MealPlanner","React","useState","Signin","route","setRoute","signInEmail","setSignInEmail","signInPassword","setSigninPassword","user","loadUser","id","name","email","favorites","joined","updateLoadUser","data","entries","onEmailChange","event","target","value","onPasswordChange","onRouteChange","onSubmitSignIn","e","preventDefault","fetch","method","headers","body","JSON","stringify","password","then","response","json"],"mappings":"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","sourcesContent":["import SigninForm from \"../components/SigninForm\";\nimport RegisterForm from \"../components/RegisterForm\";\nimport MealPlanner from \"./MealPlanner\";\nimport React, { useState } from \"react\";\n\nconst Signin = () => {\n  const [route, setRoute] = useState(\"signin\"); // The authentification will be determine by the route state. Signin means that the user has to sign in.\n  const [signInEmail, setSignInEmail] = useState(\"\");\n  const [signInPassword, setSigninPassword] = useState(\"\");\n  const [user, loadUser] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    favorites: \"\",\n    joined: \"\",\n  });\n\n  const updateLoadUser = (data) => {\n    //this is to update user when enters?\n    loadUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      favorites: data.entries,\n      joined: data.joined,\n    });\n  };\n\n  //to change the state to what the user writes in the signin form\n  const onEmailChange = (event) => {\n    setSignInEmail(event.target.value);\n  };\n\n  const onPasswordChange = (event) => {\n    setSigninPassword(event.target.value);\n  };\n\n  const onRouteChange = (route) => {\n    setRoute(route);\n  };\n\n  //When submit we will connect to the server with fetch and post the email and password\n  const onSubmitSignIn = (e) => {\n    e.preventDefault(); //prevent the default submit event. Don't forget to put also on e param on the onSubmitSignIn - SigninForm\n    fetch(\"http://localhost:3000/signin\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: signInEmail,\n        password: signInPassword,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data === \"success\") {\n          setRoute(\"home\");\n        }\n      });\n  };\n\n  return (\n    <div>\n      {route === \"home\" ? (\n        <div>\n          {/* Added a signout option that will change the state to sigin. This means that mealplanner will not be shown */}\n          <p onClick={() => onRouteChange(\"signin\")}>Signout</p>\n\n          <MealPlanner />\n        </div>\n      ) : route === \"signin\" ? ( // If the route state is \"signin\" it will show only the sign in form. If the route is not signin, that means the user is logged so the mealplanner will be shown\n        <SigninForm\n          onSubmitSignIn={onSubmitSignIn}\n          onEmailChange={onEmailChange}\n          onPasswordChange={onPasswordChange}\n          onRouteChange={onRouteChange}\n        />\n      ) : (\n        <RegisterForm loadUser={updateLoadUser} onRouteChange={onRouteChange} />\n      )}\n    </div>\n  );\n};\n\nexport default Signin;\n"]},"metadata":{},"sourceType":"module"}