{"ast":null,"code":"import _slicedToArray from\"/Users/lorennav/Documents/Diana/Web Apps Diana/Deliss/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"axios\";import Filter from\"./Filter\";import MealList from\"./MealList\";import\"../styles/MealPlanner.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var API_ID=process.env.REACT_APP_EDAMAM_API_ID;var API_KEY=process.env.REACT_APP_EDAMAM_API_KEY;// We will display a weekly meal planner with breakfast, lunch and dinner.\n//We will get the recipes on the edamame API\nvar MealPlanner=function MealPlanner(_ref){var user=_ref.user;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),breakfast=_useState2[0],setBreakfast=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),lunch=_useState4[0],setLunch=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),dinner=_useState6[0],setDinner=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),diet=_useState8[0],setDiet=_useState8[1];//by default the diet will be standard\nvar URL=\"https://api.edamam.com/search?app_id=\".concat(API_ID,\"&app_key=\").concat(API_KEY,\"&q=&health=\").concat(diet,\"&from=0&to=50&\");useEffect(function(){axios.get(URL+\"mealType=breakfast\").then(function(res){setBreakfast(res.data.hits);console.log(diet);}).catch(console.log);},[diet]);useEffect(function(){axios.get(URL+\"dishType=main&mealType=lunch\").then(function(res){setLunch(res.data.hits);console.log(diet);}).catch(console.log);},[diet]);useEffect(function(){axios.get(URL+\"dishType=main&mealType=dinner\").then(function(res){setDinner(res.data.hits);console.log(diet);}).catch(console.log);},[diet]);//it will only render if the user filters the diet type\nvar onFilterChange=function onFilterChange(e){setDiet(e.target.value);};return/*#__PURE__*/_jsxs(\"div\",{className:\"plan_container\",children:[/*#__PURE__*/_jsx(Filter//Added a filter option for standard, vegetarian and vegan\n,{onFilterChange:onFilterChange}),/*#__PURE__*/_jsx(\"h2\",{children:\"Breakfast\"}),/*#__PURE__*/_jsx(\"div\",{id:\"breakfast\",children:breakfast&&/*#__PURE__*/_jsx(MealList,{props:breakfast,diet:diet,user:user})}),/*#__PURE__*/_jsx(\"h2\",{children:\"Lunch\"}),/*#__PURE__*/_jsx(\"div\",{id:\"lunch\",children:lunch&&/*#__PURE__*/_jsx(MealList,{props:lunch,user:user})}),/*#__PURE__*/_jsx(\"h2\",{children:\"Dinner\"}),/*#__PURE__*/_jsx(\"div\",{id:\"dinner\",children:dinner&&/*#__PURE__*/_jsx(MealList,{props:dinner,user:user})})]});};export default MealPlanner;//","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/Deliss/src/components/MealPlanner.js"],"names":["React","useState","useEffect","axios","Filter","MealList","API_ID","process","env","REACT_APP_EDAMAM_API_ID","API_KEY","REACT_APP_EDAMAM_API_KEY","MealPlanner","user","breakfast","setBreakfast","lunch","setLunch","dinner","setDinner","diet","setDiet","URL","get","then","res","data","hits","console","log","catch","onFilterChange","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Filter from \"./Filter\";\nimport MealList from \"./MealList\";\nimport \"../styles/MealPlanner.css\";\n\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY;\n\n// We will display a weekly meal planner with breakfast, lunch and dinner.\n//We will get the recipes on the edamame API\nconst MealPlanner = ({ user }) => {\n  const [breakfast, setBreakfast] = useState(null);\n  const [lunch, setLunch] = useState(null);\n  const [dinner, setDinner] = useState(null);\n  const [diet, setDiet] = useState(\"\"); //by default the diet will be standard\n\n  const URL = `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&health=${diet}&from=0&to=50&`;\n\n  useEffect(() => {\n    axios\n      .get(URL + `mealType=breakfast`)\n      .then((res) => {\n        setBreakfast(res.data.hits);\n        console.log(diet);\n      })\n      .catch(console.log);\n  }, [diet]);\n\n  useEffect(() => {\n    axios\n      .get(URL + `dishType=main&mealType=lunch`)\n      .then((res) => {\n        setLunch(res.data.hits);\n        console.log(diet);\n      })\n      .catch(console.log);\n  }, [diet]);\n\n  useEffect(() => {\n    axios\n      .get(URL + `dishType=main&mealType=dinner`)\n      .then((res) => {\n        setDinner(res.data.hits);\n        console.log(diet);\n      })\n      .catch(console.log);\n  }, [diet]); //it will only render if the user filters the diet type\n\n  const onFilterChange = (e) => {\n    setDiet(e.target.value);\n  };\n\n  return (\n    <div className=\"plan_container\">\n      <Filter //Added a filter option for standard, vegetarian and vegan\n        onFilterChange={onFilterChange}\n      />\n\n      <h2>Breakfast</h2>\n      <div id=\"breakfast\">\n        {/* Recipes will be displayed by the MealList component, passing breakfast,lunch and dinner arrays as props */}\n        {/* Conditional Rendering.Only output MealList when we have a value for breakfast. */}\n        {breakfast && <MealList props={breakfast} diet={diet} user={user} />}\n      </div>\n      <h2>Lunch</h2>\n      <div id=\"lunch\">{lunch && <MealList props={lunch} user={user} />}</div>\n      <h2>Dinner</h2>\n      <div id=\"dinner\">{dinner && <MealList props={dinner} user={user} />}</div>\n    </div>\n  );\n};\n\nexport default MealPlanner;\n\n//\n"]},"metadata":{},"sourceType":"module"}