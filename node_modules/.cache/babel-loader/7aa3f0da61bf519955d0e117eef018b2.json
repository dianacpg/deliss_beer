{"ast":null,"code":"import CardBeer from\"./CardBeer\";import\"../styles/BeerList.css\";//Function the shuffle arrays\nimport{jsx as _jsx}from\"react/jsx-runtime\";function shuffleArray(array){var i=array.length-1;for(;i>0;i--){var j=Math.floor(Math.random()*(i+1));var temp=array[i];array[i]=array[j];array[j]=temp;}return array;}//We got the beer arrays for each compatible food, but we need to shuffle the array in order to not to show the same beer order.\n// If we get only 4 beers for each food, we will not have diversity. So we can get 50 beers and then slice to display only 4\n// We will map each array and create a beer card for each beer\nvar BeerList=function BeerList(_ref){var props=_ref.props,user=_ref.user;var shuffleBeerList=shuffleArray(props);var fourBeersPerFood=shuffleBeerList.slice(0,5);var finalBeerList=fourBeersPerFood.map(function(beer){return/*#__PURE__*/_jsx(CardBeer,{image:beer.image_url,name:beer.name,description:beer.tagline// ingredients={recipe.recipe.ingredientLines}\n,user:user});});return/*#__PURE__*/_jsx(\"div\",{className:\"beerlist\",children:finalBeerList});};export default BeerList;","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/DelissBeer/src/components/BeerList.js"],"names":["CardBeer","shuffleArray","array","i","length","j","Math","floor","random","temp","BeerList","props","user","shuffleBeerList","fourBeersPerFood","slice","finalBeerList","map","beer","image_url","name","tagline"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAO,wBAAP,CAEA;2CACA,QAASC,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAC3B,GAAIC,CAAAA,CAAC,CAAGD,KAAK,CAACE,MAAN,CAAe,CAAvB,CACA,KAAOD,CAAC,CAAG,CAAX,CAAcA,CAAC,EAAf,CAAmB,CACjB,GAAME,CAAAA,CAAC,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBL,CAAC,CAAG,CAArB,CAAX,CAAV,CACA,GAAMM,CAAAA,IAAI,CAAGP,KAAK,CAACC,CAAD,CAAlB,CACAD,KAAK,CAACC,CAAD,CAAL,CAAWD,KAAK,CAACG,CAAD,CAAhB,CACAH,KAAK,CAACG,CAAD,CAAL,CAAWI,IAAX,CACD,CACD,MAAOP,CAAAA,KAAP,CACD,CAED;AACA;AACA;AACA,GAAMQ,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAqB,IAAlBC,CAAAA,KAAkB,MAAlBA,KAAkB,CAAXC,IAAW,MAAXA,IAAW,CACpC,GAAMC,CAAAA,eAAe,CAAGZ,YAAY,CAACU,KAAD,CAApC,CACA,GAAMG,CAAAA,gBAAgB,CAAGD,eAAe,CAACE,KAAhB,CAAsB,CAAtB,CAAyB,CAAzB,CAAzB,CACA,GAAMC,CAAAA,aAAa,CAAGF,gBAAgB,CAACG,GAAjB,CAAqB,SAACC,IAAD,CAAU,CACnD,mBACE,KAAC,QAAD,EACE,KAAK,CAAEA,IAAI,CAACC,SADd,CAEE,IAAI,CAAED,IAAI,CAACE,IAFb,CAGE,WAAW,CAAEF,IAAI,CAACG,OAClB;AAJF,CAKE,IAAI,CAAET,IALR,EADF,CASD,CAVqB,CAAtB,CAWA,mBAAO,YAAK,SAAS,CAAC,UAAf,UAA2BI,aAA3B,EAAP,CACD,CAfD,CAiBA,cAAeN,CAAAA,QAAf","sourcesContent":["import CardBeer from \"./CardBeer\";\nimport \"../styles/BeerList.css\";\n\n//Function the shuffle arrays\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n//We got the beer arrays for each compatible food, but we need to shuffle the array in order to not to show the same beer order.\n// If we get only 4 beers for each food, we will not have diversity. So we can get 50 beers and then slice to display only 4\n// We will map each array and create a beer card for each beer\nconst BeerList = ({ props, user }) => {\n  const shuffleBeerList = shuffleArray(props);\n  const fourBeersPerFood = shuffleBeerList.slice(0, 5);\n  const finalBeerList = fourBeersPerFood.map((beer) => {\n    return (\n      <CardBeer\n        image={beer.image_url}\n        name={beer.name}\n        description={beer.tagline}\n        // ingredients={recipe.recipe.ingredientLines}\n        user={user}\n      />\n    );\n  });\n  return <div className=\"beerlist\">{finalBeerList}</div>;\n};\n\nexport default BeerList;\n"]},"metadata":{},"sourceType":"module"}