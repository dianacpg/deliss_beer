{"ast":null,"code":"var _jsxFileName = \"/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/MealPlanner.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CardMeal from \"./RecipeCard\";\nimport \"./MealPlanner2.css\";\nimport Filter from \"./Filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY;\nconst URL = `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}`; // We have to display 7 breakfasts, 7 lunches and 7 dinners;\n// We will get the recipes on the edamame API and use it on the state as an array;\n// Problem: We need diversity and not display the array always on the same order; The API doesnt have recipes ID's.\n// Possible solution: Get more than 7 meal from the API (ex: 40), Shuffle the array and then create a new array with only 7;\n// ex:          [banana, apple, orange, durian, kiwi, cherry, lemon, melon, pumpkin] -> then Reset ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon, cherry, durian] -> Splice to 7 meals ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon]\n//In Conclusion: 1ยบ get 40 recipes\n//               2ยบ Shuffle the 40 recipes\n//               3ยบ Get the first 7 recipes from that shuffled array\n// Since we have to display always 7 breakfasts, 7 lunches and 7 dinners I called the API 3 times with the meal types and put the recipes on the State as arrays.\n// Function to shuffle arrays\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nclass MealPlan extends Component {\n  //default meal plan\n  constructor() {\n    super();\n\n    this.onHandleRadioButton = e => {\n      this.setState({\n        diet: e.target.value\n      });\n    };\n\n    this.state = {\n      breakfast: [],\n      lunch: [],\n      dinner: [],\n      diet: \"balanced\",\n      mealType: \"breakfast\",\n      numberMeals: \"40\"\n    };\n  } //Fetch API for the 3 types of meals (Breakfast, Lunch, Dinner)\n\n\n  componentDidMount() {\n    axios.get(URL + \"&mealType=breakfast\").then(res => {\n      console.log(res);\n      this.setState({\n        breakfast: res.data.hits\n      });\n    });\n    axios.get(`${URL}app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&mealType=lunch&from=0&to=${this.state.numberMeals}&dishType=main`).then(res => {\n      console.log(res);\n      this.setState({\n        lunch: res.data.hits\n      });\n    });\n    axios.get(`${URL}app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&mealType=dinner&from=0&to=${this.state.numberMeals}&dishType=main`).then(res => {\n      console.log(res);\n      this.setState({\n        dinner: res.data.hits\n      });\n    });\n  } //Adding user preferences\n\n\n  //displaying recipes per type of meal\n  render() {\n    const {\n      breakfast,\n      lunch,\n      dinner,\n      days\n    } = this.state;\n    const shuffleBreakfastList = shuffleArray(breakfast); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n\n    const weeklyBreakfastNumber = shuffleBreakfastList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n\n    const BreakfastCardList = breakfast.length ? // create a recipe card for each recipe\n    weeklyBreakfastNumber.map(recipe => {\n      return /*#__PURE__*/_jsxDEV(CardMeal, {\n        image: recipe.recipe.image,\n        name: recipe.recipe.label,\n        link: recipe.recipe.url,\n        ingredients: recipe.recipe.ingredientLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Meals are cooking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n    const shuffleLunchList = shuffleArray(lunch); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n\n    const weeklyLunchNumber = shuffleLunchList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n\n    const LunchCardList = lunch.length ? // create a recipe card for each recipe\n    weeklyLunchNumber.map(recipe => {\n      return /*#__PURE__*/_jsxDEV(CardMeal, {\n        image: recipe.recipe.image,\n        name: recipe.recipe.label,\n        link: recipe.recipe.url,\n        ingredients: recipe.recipe.ingredientLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Meals are cooking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n    const shuffleDinnerList = shuffleArray(dinner); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n\n    const weeklyDinnerNumber = shuffleDinnerList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n\n    const DinnerCardList = dinner.length ? //   // create a recipe card for each recipe\n    weeklyDinnerNumber.map(recipe => {\n      return /*#__PURE__*/_jsxDEV(CardMeal, {\n        image: recipe.recipe.image,\n        name: recipe.recipe.label,\n        link: recipe.recipe.url,\n        ingredients: recipe.recipe.ingredientLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Meals are cooking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Meal Planner Happiness\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        handleChange: this.onHandleRadioButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mealtypes\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plan_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"days\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meals\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Breakfast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"breakfast\",\n              children: BreakfastCardList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Lunch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"lunch\",\n              children: LunchCardList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Dinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"dinner\",\n              children: DinnerCardList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MealPlan;","map":{"version":3,"sources":["/Users/lorennav/Documents/Diana/Web Apps Diana/FoodyMealplanner_TechLabs/src/MealPlanner.js"],"names":["React","Component","axios","CardMeal","Filter","API_ID","process","env","REACT_APP_EDAMAM_API_ID","API_KEY","REACT_APP_EDAMAM_API_KEY","URL","state","diet","numberMeals","shuffleArray","array","i","length","j","Math","floor","random","temp","MealPlan","constructor","onHandleRadioButton","e","setState","target","value","breakfast","lunch","dinner","mealType","componentDidMount","get","then","res","console","log","data","hits","render","days","shuffleBreakfastList","weeklyBreakfastNumber","slice","BreakfastCardList","map","recipe","image","label","url","ingredientLines","shuffleLunchList","weeklyLunchNumber","LunchCardList","shuffleDinnerList","weeklyDinnerNumber","DinnerCardList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CardMeal from \"./RecipeCard\";\nimport \"./MealPlanner2.css\";\nimport Filter from \"./Filter\";\n\nconst API_ID = process.env.REACT_APP_EDAMAM_API_ID;\nconst API_KEY = process.env.REACT_APP_EDAMAM_API_KEY;\nconst URL = `https://api.edamam.com/search?app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&from=0&to=${this.state.numberMeals}`;\n\n// We have to display 7 breakfasts, 7 lunches and 7 dinners;\n// We will get the recipes on the edamame API and use it on the state as an array;\n// Problem: We need diversity and not display the array always on the same order; The API doesnt have recipes ID's.\n// Possible solution: Get more than 7 meal from the API (ex: 40), Shuffle the array and then create a new array with only 7;\n// ex:          [banana, apple, orange, durian, kiwi, cherry, lemon, melon, pumpkin] -> then Reset ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon, cherry, durian] -> Splice to 7 meals ->\n//               [ apple, kiwi, pumpkin, banana, orange, melon, lemon]\n//In Conclusion: 1ยบ get 40 recipes\n//               2ยบ Shuffle the 40 recipes\n//               3ยบ Get the first 7 recipes from that shuffled array\n// Since we have to display always 7 breakfasts, 7 lunches and 7 dinners I called the API 3 times with the meal types and put the recipes on the State as arrays.\n\n// Function to shuffle arrays\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nclass MealPlan extends Component {\n  //default meal plan\n  constructor() {\n    super();\n    this.state = {\n      breakfast: [],\n      lunch: [],\n      dinner: [],\n      diet: \"balanced\",\n      mealType: \"breakfast\",\n      numberMeals: \"40\",\n    };\n  }\n\n  //Fetch API for the 3 types of meals (Breakfast, Lunch, Dinner)\n  componentDidMount() {\n    axios.get(URL + \"&mealType=breakfast\").then((res) => {\n      console.log(res);\n      this.setState({\n        breakfast: res.data.hits,\n      });\n    });\n\n    axios\n      .get(\n        `${URL}app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&mealType=lunch&from=0&to=${this.state.numberMeals}&dishType=main`\n      )\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          lunch: res.data.hits,\n        });\n      });\n\n    axios\n      .get(\n        `${URL}app_id=${API_ID}&app_key=${API_KEY}&q=&diet=${this.state.diet}&mealType=dinner&from=0&to=${this.state.numberMeals}&dishType=main`\n      )\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          dinner: res.data.hits,\n        });\n      });\n  }\n\n  //Adding user preferences\n  onHandleRadioButton = (e) => {\n    this.setState({ diet: e.target.value });\n  };\n\n  //displaying recipes per type of meal\n  render() {\n    const { breakfast, lunch, dinner, days } = this.state;\n\n    const shuffleBreakfastList = shuffleArray(breakfast); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n    const weeklyBreakfastNumber = shuffleBreakfastList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n    const BreakfastCardList = breakfast.length ? ( // create a recipe card for each recipe\n      weeklyBreakfastNumber.map((recipe) => {\n        return (\n          <CardMeal\n            image={recipe.recipe.image}\n            name={recipe.recipe.label}\n            link={recipe.recipe.url}\n            ingredients={recipe.recipe.ingredientLines}\n          />\n        );\n      })\n    ) : (\n      <div>\n        {\" \"}\n        <p>Meals are cooking...</p>{\" \"}\n      </div>\n    );\n\n    const shuffleLunchList = shuffleArray(lunch); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n    const weeklyLunchNumber = shuffleLunchList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n    const LunchCardList = lunch.length ? ( // create a recipe card for each recipe\n      weeklyLunchNumber.map((recipe) => {\n        return (\n          <CardMeal\n            image={recipe.recipe.image}\n            name={recipe.recipe.label}\n            link={recipe.recipe.url}\n            ingredients={recipe.recipe.ingredientLines}\n          />\n        );\n      })\n    ) : (\n      <div>\n        {\" \"}\n        <p>Meals are cooking...</p>{\" \"}\n      </div>\n    );\n\n    const shuffleDinnerList = shuffleArray(dinner); //Since we are display the recipe array elements, i shuffled the array to not show always the same order\n    const weeklyDinnerNumber = shuffleDinnerList.slice(0, 7); // I asked for 40 recipes and I only want to display 7\n    const DinnerCardList = dinner.length ? ( //   // create a recipe card for each recipe\n      weeklyDinnerNumber.map((recipe) => {\n        return (\n          <CardMeal\n            image={recipe.recipe.image}\n            name={recipe.recipe.label}\n            link={recipe.recipe.url}\n            ingredients={recipe.recipe.ingredientLines}\n          />\n        );\n      })\n    ) : (\n      <div>\n        {\" \"}\n        <p>Meals are cooking...</p>{\" \"}\n      </div>\n    );\n\n    return (\n      <div>\n        <h1>Meal Planner Happiness</h1>\n        <Filter handleChange={this.onHandleRadioButton} />\n        <div id=\"container\">\n          <div className=\"mealtypes\">\n            {\" \"}\n            <h2> </h2>\n          </div>\n          <div className=\"plan_container\">\n            <div className=\"days\"></div>\n            <div className=\"meals\">\n              <h2>Breakfast</h2>\n              <div id=\"breakfast\">{BreakfastCardList}</div>\n              <h2>Lunch</h2>\n              <div id=\"lunch\">{LunchCardList}</div>\n              <h2>Dinner</h2>\n              <div id=\"dinner\">{DinnerCardList}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MealPlan;\n"]},"metadata":{},"sourceType":"module"}